{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\FMS\\\\frontend\\\\src\\\\components\\\\PatchManager.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Sidebar from './Sidebar';\nimport Header from './Header';\nimport PatchDeploymentCard from './PatchDeploymentCard';\nimport DeploymentStatusCard from './DeploymentStatusCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatchManager = () => {\n  _s();\n  const [servers, setServers] = useState([{\n    id: 'server-prod-01',\n    name: 'server-prod-01'\n  }, {\n    id: 'server-dev-01',\n    name: 'server-dev-01'\n  }]);\n  const [patches, setPatches] = useState([{\n    id: 'openssl-1.1.1u',\n    name: 'openssl-1.1.1u'\n  }, {\n    id: 'nginx-1.22.1',\n    name: 'nginx-1.22.1'\n  }, {\n    id: 'kernel-5.4.0',\n    name: 'kernel-5.4.0'\n  }]);\n  const [selectedServer, setSelectedServer] = useState(servers[0].id);\n  const [selectedPatch, setSelectedPatch] = useState(patches[0].id);\n  const [deploymentProgress, setDeploymentProgress] = useState(50);\n  const [deploymentStatuses, setDeploymentStatuses] = useState([{\n    id: 1,\n    name: 'openssl-1.1.1u deployment completed',\n    type: 'completed',\n    time: '2 minutes ago'\n  }, {\n    id: 2,\n    name: 'nginx-1.22.1 deployment in progress',\n    type: 'in-progress',\n    time: '5 minutes ago'\n  }]);\n  const handleServerChange = event => {\n    setSelectedServer(event.target.value);\n  };\n  const handlePatchChange = event => {\n    setSelectedPatch(event.target.value);\n  };\n  const handleDeploy = () => {\n    console.log(`Deploying patch ${selectedPatch} to server ${selectedServer}`);\n    setDeploymentProgress(0);\n    let progress = 0;\n    const interval = setInterval(() => {\n      progress += 10;\n      if (progress <= 100) {\n        setDeploymentProgress(progress);\n      } else {\n        clearInterval(interval);\n        const newStatus = {\n          id: Date.now(),\n          name: `${selectedPatch} deployment completed`,\n          type: 'completed',\n          time: 'just now'\n        };\n        setDeploymentStatuses(prevStatuses => [newStatus, ...prevStatuses].slice(0, 5)); // Keep last 5 statuses\n      }\n    }, 200);\n  };\n  const handleRestart = () => {\n    console.log(`Restarting service on server ${selectedServer}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex h-screen bg-gray-100\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 flex flex-col overflow-y-auto\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"p-6 flex-grow\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-3xl font-semibold mb-6\",\n          children: \"Patch Deployment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PatchDeploymentCard, {\n          servers: servers,\n          patches: patches,\n          selectedServer: selectedServer,\n          selectedPatch: selectedPatch,\n          onServerChange: handleServerChange,\n          onPatchChange: handlePatchChange,\n          onDeploy: handleDeploy,\n          onRestart: handleRestart,\n          deploymentProgress: deploymentProgress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DeploymentStatusCard, {\n          deploymentStatuses: deploymentStatuses\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(PatchManager, \"hlpAMYXmBglpbcWnBadZsdszSIo=\");\n_c = PatchManager;\nexport default PatchManager;\nvar _c;\n$RefreshReg$(_c, \"PatchManager\");","map":{"version":3,"names":["React","useState","Sidebar","Header","PatchDeploymentCard","DeploymentStatusCard","jsxDEV","_jsxDEV","PatchManager","_s","servers","setServers","id","name","patches","setPatches","selectedServer","setSelectedServer","selectedPatch","setSelectedPatch","deploymentProgress","setDeploymentProgress","deploymentStatuses","setDeploymentStatuses","type","time","handleServerChange","event","target","value","handlePatchChange","handleDeploy","console","log","progress","interval","setInterval","clearInterval","newStatus","Date","now","prevStatuses","slice","handleRestart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onServerChange","onPatchChange","onDeploy","onRestart","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/FMS/frontend/src/components/PatchManager.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Sidebar from './Sidebar';\r\nimport Header from './Header';\r\nimport PatchDeploymentCard from './PatchDeploymentCard';\r\nimport DeploymentStatusCard from './DeploymentStatusCard';\r\n\r\nconst PatchManager = () => {\r\n  const [servers, setServers] = useState([\r\n    { id: 'server-prod-01', name: 'server-prod-01' },\r\n    { id: 'server-dev-01', name: 'server-dev-01' },\r\n  ]);\r\n  const [patches, setPatches] = useState([\r\n    { id: 'openssl-1.1.1u', name: 'openssl-1.1.1u' },\r\n    { id: 'nginx-1.22.1', name: 'nginx-1.22.1' },\r\n    { id: 'kernel-5.4.0', name: 'kernel-5.4.0' },\r\n  ]);\r\n\r\n  const [selectedServer, setSelectedServer] = useState(servers[0].id);\r\n  const [selectedPatch, setSelectedPatch] = useState(patches[0].id);\r\n  const [deploymentProgress, setDeploymentProgress] = useState(50);\r\n\r\n  const [deploymentStatuses, setDeploymentStatuses] = useState([\r\n    { id: 1, name: 'openssl-1.1.1u deployment completed', type: 'completed', time: '2 minutes ago' },\r\n    { id: 2, name: 'nginx-1.22.1 deployment in progress', type: 'in-progress', time: '5 minutes ago' },\r\n  ]);\r\n\r\n  const handleServerChange = (event) => {\r\n    setSelectedServer(event.target.value);\r\n  };\r\n\r\n  const handlePatchChange = (event) => {\r\n    setSelectedPatch(event.target.value);\r\n  };\r\n\r\n  const handleDeploy = () => {\r\n    console.log(`Deploying patch ${selectedPatch} to server ${selectedServer}`);\r\n    setDeploymentProgress(0);\r\n    let progress = 0;\r\n    const interval = setInterval(() => {\r\n      progress += 10;\r\n      if (progress <= 100) {\r\n        setDeploymentProgress(progress);\r\n      } else {\r\n        clearInterval(interval);\r\n        const newStatus = {\r\n          id: Date.now(),\r\n          name: `${selectedPatch} deployment completed`,\r\n          type: 'completed',\r\n          time: 'just now'\r\n        };\r\n        setDeploymentStatuses(prevStatuses => [newStatus, ...prevStatuses].slice(0, 5)); // Keep last 5 statuses\r\n      }\r\n    }, 200);\r\n  };\r\n\r\n  const handleRestart = () => {\r\n    console.log(`Restarting service on server ${selectedServer}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex h-screen bg-gray-100\">\r\n      <Sidebar />\r\n      <div className=\"flex-1 flex flex-col overflow-y-auto\"> {/* Added overflow-y-auto for scrolling if content exceeds height */}\r\n        <Header />\r\n        <main className=\"p-6 flex-grow\"> {/* Added flex-grow to allow main content to take available space */}\r\n          <h2 className=\"text-3xl font-semibold mb-6\">Patch Deployment</h2>\r\n          <PatchDeploymentCard \r\n            servers={servers}\r\n            patches={patches}\r\n            selectedServer={selectedServer}\r\n            selectedPatch={selectedPatch}\r\n            onServerChange={handleServerChange}\r\n            onPatchChange={handlePatchChange}\r\n            onDeploy={handleDeploy}\r\n            onRestart={handleRestart}\r\n            deploymentProgress={deploymentProgress}\r\n          />\r\n          <DeploymentStatusCard deploymentStatuses={deploymentStatuses} />\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatchManager; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,mBAAmB,MAAM,uBAAuB;AACvD,OAAOC,oBAAoB,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,CACrC;IAAEW,EAAE,EAAE,gBAAgB;IAAEC,IAAI,EAAE;EAAiB,CAAC,EAChD;IAAED,EAAE,EAAE,eAAe;IAAEC,IAAI,EAAE;EAAgB,CAAC,CAC/C,CAAC;EACF,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,CACrC;IAAEW,EAAE,EAAE,gBAAgB;IAAEC,IAAI,EAAE;EAAiB,CAAC,EAChD;IAAED,EAAE,EAAE,cAAc;IAAEC,IAAI,EAAE;EAAe,CAAC,EAC5C;IAAED,EAAE,EAAE,cAAc;IAAEC,IAAI,EAAE;EAAe,CAAC,CAC7C,CAAC;EAEF,MAAM,CAACG,cAAc,EAAEC,iBAAiB,CAAC,GAAGhB,QAAQ,CAACS,OAAO,CAAC,CAAC,CAAC,CAACE,EAAE,CAAC;EACnE,MAAM,CAACM,aAAa,EAAEC,gBAAgB,CAAC,GAAGlB,QAAQ,CAACa,OAAO,CAAC,CAAC,CAAC,CAACF,EAAE,CAAC;EACjE,MAAM,CAACQ,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAEhE,MAAM,CAACqB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGtB,QAAQ,CAAC,CAC3D;IAAEW,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,qCAAqC;IAAEW,IAAI,EAAE,WAAW;IAAEC,IAAI,EAAE;EAAgB,CAAC,EAChG;IAAEb,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,qCAAqC;IAAEW,IAAI,EAAE,aAAa;IAAEC,IAAI,EAAE;EAAgB,CAAC,CACnG,CAAC;EAEF,MAAMC,kBAAkB,GAAIC,KAAK,IAAK;IACpCV,iBAAiB,CAACU,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACvC,CAAC;EAED,MAAMC,iBAAiB,GAAIH,KAAK,IAAK;IACnCR,gBAAgB,CAACQ,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACtC,CAAC;EAED,MAAME,YAAY,GAAGA,CAAA,KAAM;IACzBC,OAAO,CAACC,GAAG,CAAC,mBAAmBf,aAAa,cAAcF,cAAc,EAAE,CAAC;IAC3EK,qBAAqB,CAAC,CAAC,CAAC;IACxB,IAAIa,QAAQ,GAAG,CAAC;IAChB,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjCF,QAAQ,IAAI,EAAE;MACd,IAAIA,QAAQ,IAAI,GAAG,EAAE;QACnBb,qBAAqB,CAACa,QAAQ,CAAC;MACjC,CAAC,MAAM;QACLG,aAAa,CAACF,QAAQ,CAAC;QACvB,MAAMG,SAAS,GAAG;UAChB1B,EAAE,EAAE2B,IAAI,CAACC,GAAG,CAAC,CAAC;UACd3B,IAAI,EAAE,GAAGK,aAAa,uBAAuB;UAC7CM,IAAI,EAAE,WAAW;UACjBC,IAAI,EAAE;QACR,CAAC;QACDF,qBAAqB,CAACkB,YAAY,IAAI,CAACH,SAAS,EAAE,GAAGG,YAAY,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MACnF;IACF,CAAC,EAAE,GAAG,CAAC;EACT,CAAC;EAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1BX,OAAO,CAACC,GAAG,CAAC,gCAAgCjB,cAAc,EAAE,CAAC;EAC/D,CAAC;EAED,oBACET,OAAA;IAAKqC,SAAS,EAAC,2BAA2B;IAAAC,QAAA,gBACxCtC,OAAA,CAACL,OAAO;MAAA4C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACX1C,OAAA;MAAKqC,SAAS,EAAC,sCAAsC;MAAAC,QAAA,GAAC,GAAC,eACrDtC,OAAA,CAACJ,MAAM;QAAA2C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACV1C,OAAA;QAAMqC,SAAS,EAAC,eAAe;QAAAC,QAAA,GAAC,GAAC,eAC/BtC,OAAA;UAAIqC,SAAS,EAAC,6BAA6B;UAAAC,QAAA,EAAC;QAAgB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACjE1C,OAAA,CAACH,mBAAmB;UAClBM,OAAO,EAAEA,OAAQ;UACjBI,OAAO,EAAEA,OAAQ;UACjBE,cAAc,EAAEA,cAAe;UAC/BE,aAAa,EAAEA,aAAc;UAC7BgC,cAAc,EAAExB,kBAAmB;UACnCyB,aAAa,EAAErB,iBAAkB;UACjCsB,QAAQ,EAAErB,YAAa;UACvBsB,SAAS,EAAEV,aAAc;UACzBvB,kBAAkB,EAAEA;QAAmB;UAAA0B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxC,CAAC,eACF1C,OAAA,CAACF,oBAAoB;UAACiB,kBAAkB,EAAEA;QAAmB;UAAAwB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5D,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACxC,EAAA,CA5EID,YAAY;AAAA8C,EAAA,GAAZ9C,YAAY;AA8ElB,eAAeA,YAAY;AAAC,IAAA8C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}